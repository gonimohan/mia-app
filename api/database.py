import os
from typing import Optional, Dict, Any, List
from dotenv import load_dotenv
from supabase import create_client, Client

load_dotenv()  # Load environment variables from .env file

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY") # Use service role key for backend operations

if not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("Supabase URL and Key must be set in environment variables for the backend.")

_supabase_client: Optional[Client] = None

def get_supabase_client() -> Client:
    """Initializes and returns the Supabase client."""
    global _supabase_client
    if _supabase_client is None:
        print(f"Initializing Supabase client for URL: {SUPABASE_URL[:20]}...") # Log only part of the URL
        _supabase_client = create_client(SUPABASE_URL, SUPABASE_KEY)
        print("Supabase client initialized.")
    return _supabase_client

# Constants for table names
DOCUMENTS_TABLE = "documents"

def insert_document(data: Dict[str, Any]) -> Optional[str]:
    """
    Inserts a new document into the Supabase 'documents' table.
    Returns the ID of the inserted document, or None if insertion fails.
    Assumes 'data' contains keys corresponding to column names in the 'documents' table.
    The primary key 'id' is typically auto-generated by Supabase (UUID).
    """
    client = get_supabase_client()
    try:
        response = client.table(DOCUMENTS_TABLE).insert(data).execute()
        if response.data and len(response.data) > 0:
            # Assuming the first record in the response data contains the inserted row
            # and it has an 'id' field.
            return str(response.data[0].get("id"))
        else:
            print(f"Supabase insert_document error: No data returned. Response: {response}")
            return None
    except Exception as e:
        print(f"Error inserting document into Supabase: {e}")
        return None

def get_document_by_id(document_id_str: str) -> Optional[Dict[str, Any]]:
    """
    Retrieves a document by its UUID string from the Supabase 'documents' table.
    Returns the document dict or None if not found or error.
    """
    client = get_supabase_client()
    try:
        # Assuming document_id_str is a valid UUID for Supabase
        response = client.table(DOCUMENTS_TABLE).select("*").eq("id", document_id_str).maybe_single().execute()
        if response.data:
            return response.data
        else:
            # maybe_single() returns None if no row is found, which is fine.
            # If there was an actual error, it would likely raise an exception.
            return None
    except Exception as e:
        print(f"Error retrieving document by ID '{document_id_str}' from Supabase: {e}")
        return None

def update_document_by_id(document_id_str: str, updates: Dict[str, Any]) -> bool:
    """
    Updates a document by its UUID string in the Supabase 'documents' table.
    Returns True if update was successful (at least one row affected), False otherwise.
    """
    client = get_supabase_client()
    try:
        # Ensure 'updated_at' is set if not provided, or handle it via database trigger
        if 'updated_at' not in updates:
            updates['updated_at'] = 'now()' # Supabase specific function for current timestamp

        response = client.table(DOCUMENTS_TABLE).update(updates).eq("id", document_id_str).execute()

        # Check if any rows were affected. The response structure might vary.
        # For PostgREST, if data is returned, it means the update happened.
        # If count is available and non-zero, that's also a good indicator.
        if response.data and len(response.data) > 0:
            return True
        # Some versions/configurations might provide a count
        if hasattr(response, 'count') and response.count is not None and response.count > 0:
            return True
        # Fallback check if data is present (even if empty list for no match)
        if response.data is not None: # Successful request, check if any row was actually updated
            # This part is tricky as `update().execute()` might return data even if no row matched the `eq` condition,
            # depending on `returning='representation'` (default) vs `minimal`.
            # A more robust way is to check if the returned data for the ID now reflects the update,
            # or rely on count if available. For now, we assume data presence means success.
            # Let's refine if actual behavior shows issues.
            # A common pattern is that if data is returned, it's the updated rows.
            # If no rows matched, data might be an empty list.
             if isinstance(response.data, list) and len(response.data) > 0:
                return True
             elif response.data: # if it's a single dict for example
                return True

        # If the query executed but no rows were updated (e.g. ID not found)
        # it's not an error, but the update didn't happen.
        # `execute()` for update usually returns a list of updated records.
        # If the list is empty, nothing was updated.
        return False

    except Exception as e:
        print(f"Error updating document ID '{document_id_str}' in Supabase: {e}")
        return False

def get_documents_by_user_id(user_id_str: str, limit: int = 100, offset: int = 0) -> List[Dict[str, Any]]:
    """
    Retrieves documents for a given user_id.
    """
    client = get_supabase_client()
    try:
        response = client.table(DOCUMENTS_TABLE)\
            .select("*")\
            .eq("user_id", user_id_str)\
            .order("upload_time", desc=True)\
            .limit(limit)\
            .offset(offset)\
            .execute()
        return response.data if response.data else []
    except Exception as e:
        print(f"Error retrieving documents for user ID '{user_id_str}' from Supabase: {e}")
        return []

def get_documents_by_status(status: str, limit: int = 100, offset: int = 0) -> List[Dict[str, Any]]:
    """
    Retrieves documents by their status.
    """
    client = get_supabase_client()
    try:
        response = client.table(DOCUMENTS_TABLE)\
            .select("*")\
            .eq("status", status)\
            .order("upload_time", desc=True)\
            .limit(limit)\
            .offset(offset)\
            .execute()
        return response.data if response.data else []
    except Exception as e:
        print(f"Error retrieving documents with status '{status}' from Supabase: {e}")
        return []

# Example usage (optional, for testing this file directly)
if __name__ == "__main__":
    print("Testing Supabase database functions...")
    # Ensure SUPABASE_URL and SUPABASE_SERVICE_ROLE_KEY are in your .env file for direct testing.

    # Test insert_document
    # Note: For this to work, you need a valid user_id from your 'users' table in Supabase.
    # Replace 'your_user_id_here' with an actual UUID from your users table.
    # example_user_id = "paste-a-real-user-uuid-here" # Important: Update this for testing

    # if example_user_id != "paste-a-real-user-uuid-here":
    #     print(f"Using example_user_id: {example_user_id}")
    #     doc_data = {
    #         "user_id": example_user_id,
    #         "filename": "test_supabase.txt",
    #         "original_filename": "test_supabase_orig.txt",
    #         "status": "uploaded",
    #         "file_type": "txt",
    #         "file_size": 1024
    #     }
    #     inserted_id = insert_document(doc_data)
    #     if inserted_id:
    #         print(f"Inserted document with ID: {inserted_id}")

    #         # Test get_document_by_id
    #         retrieved_doc = get_document_by_id(inserted_id)
    #         if retrieved_doc:
    #             print(f"Retrieved document: {retrieved_doc}")
    #         else:
    #             print(f"Failed to retrieve document with ID: {inserted_id}")

    #         # Test update_document_by_id
    #         update_success = update_document_by_id(inserted_id, {"status": "processing", "extracted_text": "Sample text from Supabase."})
    #         if update_success:
    #             print(f"Update successful for document ID: {inserted_id}")
    #             updated_doc = get_document_by_id(inserted_id)
    #             print(f"Updated document: {updated_doc}")
    #         else:
    #             print(f"Update failed for document ID: {inserted_id}")

    #         # Test get_documents_by_user_id
    #         user_docs = get_documents_by_user_id(example_user_id)
    #         print(f"Documents for user {example_user_id}: {user_docs}")

    #         # Test get_documents_by_status
    #         processing_docs = get_documents_by_status("processing")
    #         print(f"Documents with status 'processing': {processing_docs}")

    #     else:
    #         print("Failed to insert document for testing.")
    # else:
    #     print("Please update 'example_user_id' in the __main__ block with a real user UUID to run tests.")

    print("Supabase database function tests complete (commented out actual calls).")
